-- ability_swashbuckle = ability_swashbuckle or class({})

-- LinkLuaModifier("modifier_swashbuckle_dash", "heroes/robin_hood/ability_swashbuckle.lua", LUA_MODIFIER_MOTION_NONE)

-- function ability_swashbuckle:GetCastRange()
-- 	return self:GetSpecialValueFor("dash_range")
-- end

-- -- function ability_swashbuckle:GetCastPoint()
-- -- 	local cast_point = self.BaseClass.GetCastPoint(self)

-- -- 	return cast_point
-- -- end

-- function ability_swashbuckle:OnSpellStart()
--     if self:GetCursorPosition() == self:GetCaster():GetAbsOrigin() then
-- 		self:GetCaster():SetCursorPosition(self:GetCursorPosition() + self:GetCaster():GetForwardVector())
--     end
    
--     -- Ability properties
-- 	local caster = self:GetCaster()
-- 	local ability = self
-- 	local point = caster:GetCursorPosition()
-- 	local sound_cast = "Hero_Pangolier.Swashbuckle.Cast"
-- 	local modifier_movement = "modifier_swashbuckle_dash"
--     local attack_modifier = "modifier_imba_swashbuckle_slashes"
    
--     local dash_range = ability:GetSpecialValueFor("dash_range")
--     local range = ability:GetSpecialValueFor("range")
    
--     local direction = (point - caster:GetAbsOrigin()):Normalized()

--     caster:SetForwardVector(direction)

--     --play animation
--     caster:StartGesture(ACT_DOTA_CAST_ABILITY_1)

--     -- Play cast sound
--     EmitSoundOnLocationWithCaster(caster:GetAbsOrigin(), sound_cast, caster)
    
--     --Begin moving to target point
--     caster:AddNewModifier(caster, ability, modifier_movement, {})
    
--     --Pass the targeted point to the modifier
-- 	local modifier_movement_handler = caster:FindModifierByName(modifier_movement)
--     modifier_movement_handler.target_point = point
-- end

-- -- BUILT IN MODIFIERS
-- modifier_swashbuckle_dash = modifier_swashbuckle_dash or class({})

-- function modifier_swashbuckle_dash:OnCreated()
--     --Ability properties
--     self.attack_modifier = "modifier_imba_swashbuckle_slashes"
--     self.dash_particle = "particles/units/heroes/hero_pangolier/pangolier_swashbuckler_dash.vpcf"
--     self.hit_sound = "Hero_Pangolier.Swashbuckle.Damage"

--     --Ability specials
-- 	self.dash_speed = self:GetAbility():GetSpecialValueFor("dash_speed")
--     self.range = self:GetAbility():GetSpecialValueFor("range")
    
--     if IsServer() then
-- 		--variables
-- 		self.time_elapsed = 0

-- 		-- Wait one frame to get the target point from the ability's OnSpellStart, then calculate distance
-- 		Timers:CreateTimer(FrameTime(), function()
-- 			self.distance = (self:GetCaster():GetAbsOrigin() - self.target_point):Length2D()
-- 			self.dash_time = self.distance / self.dash_speed
-- 			self.direction = (self.target_point - self:GetCaster():GetAbsOrigin()):Normalized()

-- 			--Add dash particle
-- 			local dash = ParticleManager:CreateParticle(self.dash_particle, PATTACH_WORLDORIGIN, self:GetCaster())
-- 			ParticleManager:SetParticleControl(dash, 0, self:GetCaster():GetAbsOrigin()) -- point 0: origin, point 2: sparkles, point 5: burned soil
-- 			self:AddParticle(dash, false, false, -1, true, false)

-- 			self.frametime = FrameTime()
-- 			self:StartIntervalThink(self.frametime)
-- 		end)
-- 	end
-- end

-- function modifier_swashbuckle_dash:CheckState()
--     state = {
--         [MODIFIER_STATE_STUNNED] = true,
--         [MODIFIER_STATE_NO_UNIT_COLLISION] = true,
--         [MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY] = true
--     }

-- 	return state
-- end

-- function modifier_swashbuckle_dash:IsHidden() return true end
-- function modifier_swashbuckle_dash:IsPurgable() return false end
-- function modifier_swashbuckle_dash:IsDebuff() return false end
-- function modifier_swashbuckle_dash:IgnoreTenacity() return true end
-- function modifier_swashbuckle_dash:IsMotionController() return true end
-- function modifier_swashbuckle_dash:GetMotionControllerPriority() return DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM end

-- function modifier_swashbuckle_dash:OnIntervalThink()

-- 	-- Check Motion controllers
-- 	if not self:CheckMotionControllers() then
-- 		self:Destroy()
-- 		return nil
-- 	end

-- 	-- Horizontal motion
-- 	self:HorizontalMotion(self:GetParent(), self.frametime)
-- end

-- function modifier_swashbuckle_dash:HorizontalMotion(me, dt)
-- 	if IsServer() then
-- 		-- Check if we're still dashing
-- 		self.time_elapsed = self.time_elapsed + dt
-- 		if self.time_elapsed < self.dash_time then

-- 			-- Go forward
-- 			local new_location = self:GetCaster():GetAbsOrigin() + self.direction * self.dash_speed * dt
-- 			self:GetCaster():SetAbsOrigin(new_location)
-- 		else
-- 			self:Destroy()
-- 		end
-- 	end
-- end
